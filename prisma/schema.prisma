// =======================================================
//  Prisma schema  â€¢  SQLite   (2025-07-04)
// =======================================================
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// -------------------------
//  ENUMS
// -------------------------

enum SocialPlatform {
  WEBSITE
  TWITTER
  FACEBOOK
  INSTAGRAM
  MASTODON
  OTHER
}

enum GlobalRole {
  ORGANISER
  ADMIN
}

// -------------------------
//  MODELS
// -------------------------

model Association {
  id           String   @id @default(uuid())
  name         String   @unique
  slug         String   @unique
  description  String
  contactEmail String
  phone        String?
  website      String?
  logoUrl      String?
  updatedAt    DateTime @updatedAt

  // relations
  socialLinks SocialLink[]
  articles    Article[]
  organisers  Organiser[] // 1-to-many per ERD
}

model SocialLink {
  id            Int            @id @default(autoincrement())
  platform      SocialPlatform
  url           String
  associationId String
  association   Association    @relation(fields: [associationId], references: [id])

  @@index([associationId])
}

model Article {
  id            Int         @id @default(autoincrement())
  slug          String      @unique
  title         String
  bodyJson      Json // ProseMirror / Tiptap doc
  yjsState      Bytes? // snapshot for real-time collab
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  associationId String
  association   Association @relation(fields: [associationId], references: [id])

  @@index([associationId])
}

model Organiser {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  role         GlobalRole @default(ORGANISER)
  createdAt    DateTime   @default(now())

  associationId String
  association   Association @relation(fields: [associationId], references: [id])

  tokens RefreshToken[]

  @@index([associationId])
  @@map("Organiser") // keep existing table name
}

model RefreshToken {
  id          Int       @id @default(autoincrement())
  tokenHash   String    @unique
  organiserId String    @map("organiserId") // preserve old column name
  organiser   Organiser @relation(fields: [organiserId], references: [id])
  expiresAt   DateTime
  revoked     Boolean   @default(false)

  @@index([organiserId])
}
